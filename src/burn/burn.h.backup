// FinalBurn Neo - Emulator for MC68000/Z80 based arcade games
//            Refer to the "license.txt" file for more info

// Burner emulation library
#ifndef _BURN_H
#define _BURN_H

// Define TCHAR first, before any other includes
#ifndef TCHAR_DEFINED
#define TCHAR_DEFINED
typedef char TCHAR;
#endif

#include <stdio.h>

// Define macros for configuration
#include <stdint.h>

// ---------------------------------------------------------------------------
// Tchar header and types

#ifdef USE_METAL_RENDERER
// For Metal builds, use our custom Metal tchar implementation 
#include "../burner/metal/metal_tchar.h"
#else
// For standard builds use default tchar implementation
#include "tchar.h"
#endif

#include <time.h>

#ifdef _MSC_VER
typedef signed __int64						INT64;
typedef unsigned __int64					UINT64;
#else
__extension__ typedef unsigned long long	UINT64;
__extension__ typedef long long				INT64;
#endif

typedef unsigned char						UINT8;
typedef signed char 						INT8;
typedef unsigned short					UINT16;
typedef signed short						INT16;
typedef unsigned int						UINT32;
typedef signed int						INT32;

#include "state.h"
#include "cheat.h"
#include "hiscore.h"
#include "burnint.h"

extern TCHAR szAppHiscorePath[MAX_PATH];
extern TCHAR szAppSamplesPath[MAX_PATH];
extern TCHAR szAppHDDPath[MAX_PATH];
extern TCHAR szAppBlendPath[MAX_PATH];
extern TCHAR szAppEEPROMPath[MAX_PATH];

// Macro to determine the size of a struct up to and including "member"
#define STRUCT_SIZE_HELPER(type, member) offsetof(type, member) + sizeof(((type*)0)->member)

// Enable the MAME logerror() function in debug builds
// #define MAME_USE_LOGERROR

// Give access to the CPUID function for various compilers
#if defined (__GNUC__)
 #define CPUID(f,ra,rb,rc,rd) __asm__ __volatile__ ("cpuid"											\
													: "=a" (ra), "=b" (rb), "=c" (rc), "=d" (rd)	\
													: "a"  (f)										\
												   );
#elif defined (_MSC_VER)
 #define CPUID(f,ra,rb,rc,rd) __asm { __asm mov		eax, f		\
									  __asm cpuid				\
									  __asm mov		ra, eax		\
									  __asm mov		rb, ebx		\
									  __asm mov		rc, ecx		\
									  __asm mov		rd, edx }
#else
 #define CPUID(f,ra,rb,rc,rd)
#endif

#ifndef BUILD_X86_ASM
 #undef CPUID
 #define CPUID(f,ra,rb,rc,rd)
#endif

#ifdef _UNICODE
 #define SEPERATOR_1 " \u2022 "
 #define SEPERATOR_2 " \u25E6 "
#else
 #define SEPERATOR_1 " ~ "
 #define SEPERATOR_2 " ~ "
#endif

#ifdef _UNICODE
 #define WRITE_UNICODE_BOM(file) { UINT16 BOM[] = { 0xFEFF }; fwrite(BOM, 2, 1, file); }
#else
 #define WRITE_UNICODE_BOM(file)
#endif

extern INT32 nBurnVer;						// Version number of the library

enum BurnCartrigeCommand { CART_INIT_START, CART_INIT_END, CART_EXIT };

// ---------------------------------------------------------------------------
// Callbacks

// Application-defined rom loading function
extern INT32 (*BurnExtLoadRom)(UINT8* Dest, INT32* pnWrote, INT32 i);

// Application-defined progress indicator functions
extern INT32 (*BurnExtProgressRangeCallback)(double dProgressRange);
extern INT32 (*BurnExtProgressUpdateCallback)(double dProgress, const TCHAR* pszText, bool bAbs);

// Application-defined catridge initialisation function
extern INT32 (*BurnExtCartridgeSetupCallback)(BurnCartrigeCommand nCommand);

// Application-defined colour conversion function
extern UINT32 (*BurnHighCol) (INT32 r, INT32 g, INT32 b, INT32 i);

// ---------------------------------------------------------------------------

extern UINT32 nCurrentFrame;

inline static INT32 GetCurrentFrame() {
	return nCurrentFrame;
}

inline static void SetCurrentFrame(const UINT32 n) {
	nCurrentFrame = n;
}

// ---------------------------------------------------------------------------
// Driver info structures

// ROMs

#define BRF_PRG				(1 << 20)
#define BRF_GRA				(1 << 21)
#define BRF_SND				(1 << 22)

#define BRF_ESS				(1 << 24)
#define BRF_BIOS			(1 << 25)
#define BRF_SELECT			(1 << 26)
#define BRF_OPT				(1 << 27)
#define BRF_NODUMP			(1 << 28)

struct BurnRomInfo {
	char *szName;
	UINT32 nLen;
	UINT32 nCrc;
	UINT32 nType;
};

struct BurnSampleInfo {
	char *szName;
	UINT32 nFlags;
};

struct BurnHDDInfo {
	char *szName;
	UINT32 nLen;
	UINT32 nCrc;
};

// ---------------------------------------------------------------------------

// Rom Data

struct RomDataInfo {
	char szZipName[MAX_PATH];
	char szDrvName[MAX_PATH];
	char szExtraRom[MAX_PATH];
	wchar_t szOldName[MAX_PATH];
	wchar_t szFullName[MAX_PATH];
	INT32 nDriverId;
	INT32 nDescCount;
};

extern RomDataInfo* pRDI;
extern BurnRomInfo* pDataRomDesc;

char* RomdataGetDrvName();
void RomDataSetFullName();
void RomDataInit();
void RomDataExit();

// ---------------------------------------------------------------------------

// Inputs

#define BIT_DIGITAL			(1)

#define BIT_GROUP_ANALOG	(4)
#define BIT_ANALOG_REL		(4)
#define BIT_ANALOG_ABS		(5)

#define BIT_GROUP_CONSTANT	(8)
#define BIT_CONSTANT		(8)
#define BIT_DIPSWITCH		(9)

struct BurnInputInfo {
	char* szName;
	UINT8 nType;
	union {
		UINT8* pVal;					// Most inputs use a char*
		UINT16* pShortVal;				// All analog inputs use a short*
	};
	char* szInfo;
};

// DIPs

#ifndef BURN_DIPINFO_DEFINED
#define BURN_DIPINFO_DEFINED
struct BurnDIPInfo {
	INT32 nInput;
	UINT8 nFlags;
	UINT8 nMask;
	UINT8 nSetting;
	char* szText;
};
#endif

#define DIP_OFFSET(x) {x, 0xf0, 0xff, 0xff, NULL},

// ---------------------------------------------------------------------------
// Common CPU definitions

// sync to nCyclesDone[]
#define CPU_RUN(num,proc) do { nCyclesDone[num] += proc ## Run(((i + 1) * nCyclesTotal[num] / nInterleave) - nCyclesDone[num]); } while (0)
#define CPU_IDLE(num,proc) do { nCyclesDone[num] += proc ## Idle(((i + 1) * nCyclesTotal[num] / nInterleave) - nCyclesDone[num]); } while (0)
#define CPU_IDLE_NULL(num) do { nCyclesDone[num] += ((i + 1) * nCyclesTotal[num] / nInterleave) - nCyclesDone[num]; } while (0)
// sync to cpuTotalCycles()
#define CPU_RUN_SYNCINT(num,proc) do { nCyclesDone[num] += proc ## Run(((i + 1) * nCyclesTotal[num] / nInterleave) - proc ## TotalCycles()); } while (0)
#define CPU_IDLE_SYNCINT(num,proc) do { nCyclesDone[num] += proc ## Idle(((i + 1) * nCyclesTotal[num] / nInterleave) - proc ## TotalCycles()); } while (0)
// sync to timer
#define CPU_RUN_TIMER(num) do { BurnTimerUpdate((i + 1) * nCyclesTotal[num] / nInterleave); if (i == nInterleave - 1) BurnTimerEndFrame(nCyclesTotal[num]); } while (0)
#define CPU_RUN_TIMER_YM3812(num) do { BurnTimerUpdateYM3812((i + 1) * nCyclesTotal[num] / nInterleave); if (i == nInterleave - 1) BurnTimerEndFrameYM3812(nCyclesTotal[num]); } while (0)
#define CPU_RUN_TIMER_YM3526(num) do { BurnTimerUpdateYM3526((i + 1) * nCyclesTotal[num] / nInterleave); if (i == nInterleave - 1) BurnTimerEndFrameYM3526(nCyclesTotal[num]); } while (0)
#define CPU_RUN_TIMER_Y8950(num) do { BurnTimerUpdateY8950((i + 1) * nCyclesTotal[num] / nInterleave); if (i == nInterleave - 1) BurnTimerEndFrameY8950(nCyclesTotal[num]); } while (0)
// speed adjuster
INT32 BurnSpeedAdjust(INT32 cyc);

#define CPU_IRQSTATUS_NONE	0
#define CPU_IRQSTATUS_ACK	1
#define CPU_IRQSTATUS_AUTO	2
#define CPU_IRQSTATUS_HOLD	4

#define CPU_IRQLINE0		0
#define CPU_IRQLINE1		1
#define CPU_IRQLINE2		2
#define CPU_IRQLINE3		3
#define CPU_IRQLINE4		4
#define CPU_IRQLINE5		5
#define CPU_IRQLINE6		6
#define CPU_IRQLINE7		7

#define CPU_IRQLINE_IRQ		CPU_IRQLINE0
#define CPU_IRQLINE_FIRQ	CPU_IRQLINE1
#define CPU_IRQLINE_NMI		0x20

#define MAP_READ		1
#define MAP_WRITE		2
#define MAP_FETCHOP		4
#define MAP_FETCHARG		8
#define MAP_FETCH		(MAP_FETCHOP|MAP_FETCHARG)
#define MAP_ROM			(MAP_READ|MAP_FETCH)
#define MAP_RAM			(MAP_ROM|MAP_WRITE)

// Macros to Allocate and Free MemIndex
#define BurnAllocMemIndex() do {                				\
	AllMem = NULL;                                 				\
	MemIndex();                                 				\
	INT32 nLen = MemEnd - (UINT8 *)0;           				\
	if ((AllMem = (UINT8 *)BurnMalloc(nLen)) == NULL) return 1;	\
	memset(AllMem, 0, nLen);                       				\
	MemIndex();                                 				\
} while (0)

#define BurnFreeMemIndex() do { BurnFree(AllMem); } while (0)

// ---------------------------------------------------------------------------

extern bool bBurnUseMMX;
#ifdef BUILD_A68K
extern bool bBurnUseASMCPUEmulation;
#endif

extern UINT32 nFramesEmulated;
extern UINT32 nFramesRendered;
extern clock_t starttime;			// system time when emulation started and after roms loaded

extern bool bForce60Hz;
extern bool bSpeedLimit60hz;
extern double dForcedFrameRate;

extern bool bBurnUseBlend;

extern INT32 nBurnFPS;
extern INT32 nBurnCPUSpeedAdjust;

extern UINT32 nBurnDrvCount;		// Count of game drivers
extern int nBurnDrvActive;		// Which game driver is selected
extern INT32 nBurnDrvSubActive;		// Which sub-game driver is selected
extern UINT32 nBurnDrvSelect[8];	// Which games are selected (i.e. loaded but not necessarily active)

extern char* pszCustomNameA;
extern char szBackupNameA[MAX_PATH];
extern TCHAR szBackupNameW[MAX_PATH];

extern char** szShortNamesExArray;
extern TCHAR** szLongNamesExArray;
extern UINT32 nNamesExArray;

extern INT32 nMaxPlayers;

extern UINT8 *pBurnDraw;			// Pointer to correctly sized bitmap
extern INT32 nBurnPitch;			// Pitch between each line
extern INT32 nBurnBpp;				// Bytes per pixel (2, 3, or 4)

extern UINT8 nBurnLayer;			// Can be used externally to select which layers to show
extern UINT8 nSpriteEnable;			// Can be used externally to select which Sprites to show

#ifdef __cplusplus
extern "C" {
#endif
extern INT32 bBurnRunAheadFrame;        // for drivers, hiscore, etc, to recognize that this is the "runahead frame"
#ifdef __cplusplus
}
#endif

extern INT32 nBurnSoundRate;		// Samplerate of sound
extern INT32 nBurnSoundLen;			// Length in samples per frame
extern INT16* pBurnSoundOut;		// Pointer to output buffer

extern INT32 nInterpolation;		// Desired interpolation level for ADPCM/PCM sound
extern INT32 nFMInterpolation;		// Desired interpolation level for FM sound

extern UINT32 *pBurnDrvPalette;

#define PRINT_NORMAL	(0)
#define PRINT_UI		(1)
#define PRINT_IMPORTANT (2)
#define PRINT_ERROR		(3)
#define PRINT_LEVEL1	(4)
#define PRINT_LEVEL2	(5)
#define PRINT_LEVEL3	(6)
#define PRINT_LEVEL4	(7)
#define PRINT_LEVEL5	(8)
#define PRINT_LEVEL6	(9)
#define PRINT_LEVEL7	(10)
#define PRINT_LEVEL8	(11)
#define PRINT_LEVEL9	(12)
#define PRINT_LEVEL10	(13)

#ifndef bprintf
extern INT32 (*bprintf) (INT32 nStatus, TCHAR* szFormat, ...);
#endif

#ifdef __cplusplus
extern "C" {
#endif
INT32 BurnLibInit();
INT32 BurnLibExit();
INT32 BurnDrvInit();
INT32 BurnDrvExit();
INT32 BurnDrvCartridgeSetup(BurnCartrigeCommand nCommand);
INT32 BurnDrvFrame();
INT32 BurnDrvRedraw();
INT32 BurnRecalcPal();
INT32 BurnDrvGetPaletteEntries();
INT32 BurnSetProgressRange(double dProgressRange);
INT32 BurnUpdateProgress(double dProgress, const TCHAR* pszText, bool bAbs);
void BurnLocalisationSetName(char *szName, TCHAR *szLongName);
void BurnGetLocalTime(tm *nTime);
UINT16 BurnRandom();
void BurnRandomScan(INT32 nAction);
void BurnRandomInit();
void BurnRandomSetSeed(UINT64 nSeed);
INT32 BurnSynchroniseStream(INT32 nSoundRate);
double BurnGetTime();
void BurnDump_(char *filename, UINT8 *buffer, INT32 bufsize, INT32 append);
void BurnDumpLoad_(char *filename, UINT8 *buffer, INT32 bufsize);
TCHAR* BurnDrvGetText(UINT32 i);
char* BurnDrvGetTextA(UINT32 i);
const char* BurnDrvGetFullNameW(UINT32 i);
INT32 BurnDrvGetIndex(char* szName);
INT32 BurnDrvGetZipName(char** pszName, UINT32 i);
INT32 BurnDrvSetZipName(char* szName, INT32 i);
INT32 BurnDrvGetRomInfo(struct BurnRomInfo *pri, UINT32 i);
INT32 BurnDrvGetRomName(char** pszName, UINT32 i, INT32 nAka);
INT32 BurnDrvGetInputInfo(struct BurnInputInfo* pii, UINT32 i);
INT32 BurnDrvGetDIPInfo(struct BurnDIPInfo* pdi, UINT32 i);
INT32 BurnDrvGetSampleInfo(struct BurnSampleInfo *pri, UINT32 i);
INT32 BurnDrvGetSampleName(char** pszName, UINT32 i, INT32 nAka);
INT32 BurnDrvGetHDDInfo(struct BurnHDDInfo *pri, UINT32 i);
INT32 BurnDrvGetHDDName(char** pszName, UINT32 i, INT32 nAka);
INT32 BurnDrvGetVisibleSize(INT32* pnWidth, INT32* pnHeight);
INT32 BurnDrvGetVisibleOffs(INT32* pnLeft, INT32* pnTop);
INT32 BurnDrvGetFullSize(INT32* pnWidth, INT32* pnHeight);
INT32 BurnDrvGetAspect(INT32* pnXAspect, INT32* pnYAspect);
INT32 BurnDrvSetVisibleSize(INT32 pnWidth, INT32 pnHeight);
INT32 BurnDrvSetAspect(INT32 pnXAspect,INT32 pnYAspect);
INT32 BurnDrvGetHardwareCode();
INT32 BurnDrvGetFlags();
bool BurnDrvIsWorking();
INT32 BurnDrvGetMaxPlayers();
INT32 BurnDrvGetGenreFlags();
INT32 BurnDrvGetFamilyFlags();

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransferExit();
void BurnClearScreen();

// Refresh rate function
void BurnSetRefreshRate(double dFrameRate);

// Driver selection and management
INT32 BurnDrvSelect(INT32 nDrvNum);
INT32 BurnDrvSetInput(INT32 i, INT32 nState);
INT32 BurnDrvFind(const char* szName);

// ROM loading functions
INT32 BurnLoadRom(UINT8* Dest, INT32* pnWrote, INT32 i);
void* BurnRealloc(void* ptr, size_t size);
void* BurnMalloc(size_t size);
void BurnFree(void* ptr);

// Timer functions
UINT64 BurnTimerCPUTotalCycles();
void BurnTimerUpdate(INT32 nCycles);
void BurnTimerEndFrame(INT32 nCycles);

// Graphics transfer functions
void BurnTransferCopy(UINT32 *pPalette);
void BurnTransferInit();
void BurnTransfer